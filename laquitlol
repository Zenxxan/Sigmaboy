local ScreenGui = Instance.new('ScreenGui')
ScreenGui.Name = 'SyllinseHub'
ScreenGui.Parent = game:GetService('CoreGui')

local MainFrame = Instance.new('Frame')
MainFrame.Size = UDim2.new(0, 650, 0, 430)
MainFrame.Position = UDim2.new(0.5, -325, 0.5, -215)
MainFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
MainFrame.BorderSizePixel = 0
MainFrame.Parent = ScreenGui

local MainCorner = Instance.new('UICorner')
MainCorner.CornerRadius = UDim.new(0, 15)
MainCorner.Parent = MainFrame

local shadowStroke = Instance.new('UIStroke')
shadowStroke.Color = Color3.new(0, 0, 0)
shadowStroke.Transparency = 0.7
shadowStroke.Thickness = 8
shadowStroke.Parent = MainFrame

local Topbar = Instance.new('Frame')
Topbar.Size = UDim2.new(1, 0, 0, 50)
Topbar.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Topbar.BorderSizePixel = 0
Topbar.Parent = MainFrame

local TopCorner = Instance.new('UICorner')
TopCorner.CornerRadius = UDim.new(0, 15)
TopCorner.Parent = Topbar

local TopbarStroke = Instance.new('UIStroke')
TopbarStroke.Thickness = 1
TopbarStroke.Color = Color3.fromRGB(60, 60, 60)
TopbarStroke.Parent = Topbar

local Logo = Instance.new('ImageLabel')
Logo.Size = UDim2.new(0, 35, 0, 35)
Logo.Position = UDim2.new(0, 12, 0.5, -17)
Logo.Image = 'rbxassetid://109884256700214'
Logo.BackgroundTransparency = 1
Logo.Parent = Topbar

local Title = Instance.new('TextLabel')
Title.Size = UDim2.new(0, 300, 1, 0)
Title.Position = UDim2.new(0, 55, 0, 0)
Title.Text = 'Syllinse Hub | Made by Zenx'
Title.TextColor3 = Color3.fromRGB(235, 235, 235)
Title.TextSize = 17
Title.Font = Enum.Font.GothamBold
Title.BackgroundTransparency = 1
Title.TextXAlignment = Enum.TextXAlignment.Left
Title.Parent = Topbar

local function createTopButton(txt, posX)
    local Btn = Instance.new('TextButton')
    Btn.Size = UDim2.new(0, 35, 0, 35)
    Btn.Position = UDim2.new(1, posX, 0.5, -17)
    Btn.Text = txt
    Btn.Font = Enum.Font.GothamBold
    Btn.TextSize = 18
    Btn.TextColor3 = Color3.fromRGB(200, 200, 200)
    Btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Btn.Parent = Topbar
    local corner = Instance.new('UICorner', Btn)
    corner.CornerRadius = UDim.new(0, 8)
    Btn.MouseEnter:Connect(function()
        TweenService:Create(
            Btn,
            TweenInfo.new(0.25),
            { BackgroundColor3 = Color3.fromRGB(60, 60, 60) }
        ):Play()
    end)
    Btn.MouseLeave:Connect(function()
        TweenService:Create(
            Btn,
            TweenInfo.new(0.25),
            { BackgroundColor3 = Color3.fromRGB(35, 35, 35) }
        ):Play()
    end)
    return Btn
end

local CloseBtn = createTopButton('X', -45)
local MinBtn = createTopButton('-', -85)
local FullBtn = createTopButton('â¬œ', -125)

CloseBtn.MouseButton1Click:Connect(function()
    ScreenGui:Destroy()
end)

local fullscreen = false
FullBtn.MouseButton1Click:Connect(function()
    fullscreen = not fullscreen
    if fullscreen then
        TweenService:Create(MainFrame, TweenInfo.new(0.35), {
            Size = UDim2.new(1, -60, 1, -60),
            Position = UDim2.new(0, 30, 0, 30),
        }):Play()
    else
        TweenService:Create(MainFrame, TweenInfo.new(0.35), {
            Size = UDim2.new(0, 650, 0, 430),
            Position = UDim2.new(0.5, -325, 0.5, -215),
        }):Play()
    end
end)

do
    local dragging = false
    local dragStart, startPos
    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if
            dragging
            and input.UserInputType == Enum.UserInputType.MouseMovement
        then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

local Sidebar = Instance.new('Frame')
Sidebar.Size = UDim2.new(0, 140, 1, -50)
Sidebar.Position = UDim2.new(0, 0, 0, 50)
Sidebar.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
Sidebar.Parent = MainFrame

local fullscreen = false
FullBtn.MouseButton1Click:Connect(function()
    fullscreen = not fullscreen
    if fullscreen then
        TweenService:Create(MainFrame, TweenInfo.new(0.35), {
            Size = UDim2.new(1, -60, 1, -60),
            Position = UDim2.new(0, 30, 0, 30),
        }):Play()
    else
        TweenService:Create(MainFrame, TweenInfo.new(0.35), {
            Size = UDim2.new(0, 650, 0, 430),
            Position = UDim2.new(0.5, -325, 0.5, -215),
        }):Play()
    end
end)

do
    local dragging = false
    local dragStart, startPos
    Topbar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = MainFrame.Position
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    dragging = false
                end
            end)
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if
            dragging
            and input.UserInputType == Enum.UserInputType.MouseMovement
        then
            local delta = input.Position - dragStart
            MainFrame.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
end

local function tween(obj, props, time)
    TweenService:Create(
        obj,
        TweenInfo.new(
            time or 0.25,
            Enum.EasingStyle.Quad,
            Enum.EasingDirection.Out
        ),
        props
    ):Play()
end

local function createTab(name, y, iconId)
    local Btn = Instance.new('TextButton')
    Btn.Size = UDim2.new(1, -20, 0, 45)
    Btn.Position = UDim2.new(0, 10, 0, y)
    Btn.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Btn.AutoButtonColor = false
    Btn.Text = ''
    Btn.Parent = Sidebar
    TabButtons[name] = Btn

    local corner = Instance.new('UICorner', Btn)
    corner.CornerRadius = UDim.new(0, 10)

    local stroke = Instance.new('UIStroke')
    stroke.Color = Color3.fromRGB(100, 100, 100)
    stroke.Thickness = 0
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Parent = Btn

    local container = Instance.new('Frame')
    container.BackgroundTransparency = 1
    container.Size = UDim2.new(1, -10, 1, 0)
    container.Position = UDim2.new(0, 5, 0, 0)
    container.Parent = Btn

    local hLayout = Instance.new('UIListLayout')
    hLayout.Parent = container
    hLayout.FillDirection = Enum.FillDirection.Horizontal
    hLayout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    hLayout.VerticalAlignment = Enum.VerticalAlignment.Center
    hLayout.Padding = UDim.new(0, 8)

    local icon
    if iconId then
        icon = Instance.new('ImageLabel')
        icon.Size = UDim2.new(0, 20, 0, 20)
        icon.BackgroundTransparency = 1
        icon.Image = 'rbxassetid://' .. iconId
        icon.ImageColor3 = Color3.fromRGB(180, 180, 180)
        icon.Parent = container
    end

    local label = Instance.new('TextLabel')
    label.BackgroundTransparency = 1
    label.Size = UDim2.new(1, -30, 1, 0)
    label.Font = Enum.Font.GothamBold
    label.TextColor3 = Color3.fromRGB(200, 200, 200)
    label.TextSize = 15
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Text = name
    label.Parent = container

    Btn.MouseEnter:Connect(function()
        if CurrentTab ~= name then
            tween(Btn, { BackgroundColor3 = Color3.fromRGB(50, 50, 50) }, 0.2)
            tween(stroke, { Thickness = 1 }, 0.2)
        end
    end)
    Btn.MouseLeave:Connect(function()
        if CurrentTab ~= name then
            tween(Btn, { BackgroundColor3 = Color3.fromRGB(35, 35, 35) }, 0.2)
            tween(stroke, { Thickness = 0 }, 0.2)
        end
    end)

    Btn.MouseButton1Click:Connect(function()
        CurrentTab = name

        for tabName, frame in pairs(TabFrames) do
            if tabName == name then
                frame.Visible = true
                frame.Position = UDim2.new(0, 160, 0, 80)
                tween(frame, { Position = UDim2.new(0, 160, 0, 60) }, 0.3)
            else
                frame.Visible = false
            end
        end

        for tabName, button in pairs(TabButtons) do
            local lbl = button
                :FindFirstChildWhichIsA('Frame')
                :FindFirstChildWhichIsA('TextLabel')
            local icn = button
                :FindFirstChildWhichIsA('Frame')
                :FindFirstChildWhichIsA('ImageLabel')
            local strk = button:FindFirstChildOfClass('UIStroke')

            if tabName == name then
                tween(
                    button,
                    { BackgroundColor3 = Color3.fromRGB(70, 70, 70) },
                    0.25
                )
                tween(
                    strk,
                    { Thickness = 2, Color = Color3.fromRGB(0, 170, 255) },
                    0.25
                )
                tween(lbl, { TextColor3 = Color3.fromRGB(255, 255, 255) }, 0.25)
                if icn then
                    tween(
                        icn,
                        { ImageColor3 = Color3.fromRGB(255, 255, 255) },
                        0.25
                    )
                end
            else
                tween(
                    button,
                    { BackgroundColor3 = Color3.fromRGB(35, 35, 35) },
                    0.25
                )
                tween(
                    strk,
                    { Thickness = 0, Color = Color3.fromRGB(100, 100, 100) },
                    0.25
                )
                tween(lbl, { TextColor3 = Color3.fromRGB(200, 200, 200) }, 0.25)
                if icn then
                    tween(
                        icn,
                        { ImageColor3 = Color3.fromRGB(180, 180, 180) },
                        0.25
                    )
                end
            end
        end
    end)
end

for i, tab in ipairs(Tabs) do
    local frame = Instance.new('Frame')
    frame.Size = UDim2.new(1, -160, 1, -70)
    frame.Position = UDim2.new(0, 160, 0, 60)
    frame.BackgroundColor3 = Color3.fromRGB(25, 25, 25)
    frame.BorderSizePixel = 0
    frame.Visible = (tab.Name == CurrentTab)
    frame.Parent = MainFrame
    TabFrames[tab.Name] = frame

    local corner = Instance.new('UICorner', frame)
    corner.CornerRadius = UDim.new(0, 10)

    local stroke = Instance.new('UIStroke', frame)
    stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
    stroke.Thickness = 1
    stroke.Color = Color3.fromRGB(40, 40, 40)
    stroke.Transparency = 0.7

    local scrollFrame = Instance.new('ScrollingFrame')
    scrollFrame.Size = UDim2.new(1, 0, 1, 0)
    scrollFrame.Position = UDim2.new(0, 0, 0, 0)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.BorderSizePixel = 0
    scrollFrame.ScrollBarThickness = 6
    scrollFrame.ScrollBarImageColor3 = Color3.fromRGB(70, 70, 70)
    scrollFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y
    scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    scrollFrame.Parent = frame

    local layout = Instance.new('UIListLayout', scrollFrame)
    layout.Padding = UDim.new(0, 15)
    layout.HorizontalAlignment = Enum.HorizontalAlignment.Left
    layout.VerticalAlignment = Enum.VerticalAlignment.Top
    layout.SortOrder = Enum.SortOrder.LayoutOrder

    layout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        scrollFrame.CanvasSize =
            UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
    end)

    createTab(tab.Name, 10 + (i - 1) * 55, tab.Icon)
end

local function createToggle(tabName, text, default, callback)
    local tabFrame = TabFrames[tabName]
    if not tabFrame then
        return
    end
    local scroll = tabFrame:FindFirstChildOfClass('ScrollingFrame')
    if not scroll then
        return
    end

    local Frame = Instance.new('Frame')
    Frame.Size = UDim2.new(1, -20, 0, 40)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 0
    Frame.Parent = scroll
    Instance.new('UICorner', Frame).CornerRadius = UDim.new(0, 6)

    local Label = Instance.new('TextLabel')
    Label.Size = UDim2.new(0.7, 0, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.Font = Enum.Font.Gotham
    Label.TextSize = 15
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Frame

    local Switch = Instance.new('Frame')
    Switch.Size = UDim2.new(0, 50, 0, 22)
    Switch.Position = UDim2.new(1, -60, 0.5, -11)
    Switch.BackgroundColor3 = default and Color3.fromRGB(0, 255, 0)
        or Color3.fromRGB(60, 60, 60)
    Switch.Parent = Frame
    Instance.new('UICorner', Switch).CornerRadius = UDim.new(1, 0)

    local Circle = Instance.new('Frame')
    Circle.Size = UDim2.new(0, 18, 0, 18)
    Circle.Position = default and UDim2.new(1, -20, 0.5, -9)
        or UDim2.new(0, 2, 0.5, -9)
    Circle.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Circle.Parent = Switch
    Instance.new('UICorner', Circle).CornerRadius = UDim.new(1, 0)

    local State = default
    local function setState(new)
        State = new
        TweenService
            :Create(Switch, TweenInfo.new(0.25), {
                BackgroundColor3 = State and Color3.fromRGB(0, 255, 0)
                    or Color3.fromRGB(60, 60, 60),
            })
            :Play()
        TweenService:Create(Circle, TweenInfo.new(0.25), {
            Position = State and UDim2.new(1, -20, 0.5, -9)
                or UDim2.new(0, 2, 0.5, -9),
        }):Play()
        if callback then
            callback(State)
        end
    end

    Frame.InputBegan:Connect(function(input)
        if
            input.UserInputType == Enum.UserInputType.MouseButton1
            or input.UserInputType == Enum.UserInputType.Touch
        then
            setState(not State)
        end
    end)

    return setState
end

local function createSlider(tabName, text, min, max, default, callback)
    local tabFrame = TabFrames[tabName]
    if not tabFrame then
        return
    end
    local scroll = tabFrame:FindFirstChildOfClass('ScrollingFrame')
    if not scroll then
        return
    end

    local Frame = Instance.new('Frame')
    Frame.Size = UDim2.new(1, -20, 0, 60)
    Frame.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
    Frame.BorderSizePixel = 0
    Frame.Parent = scroll
    Instance.new('UICorner', Frame).CornerRadius = UDim.new(0, 6)

    local Label = Instance.new('TextLabel')
    Label.Size = UDim2.new(1, -10, 0, 20)
    Label.Position = UDim2.new(0, 10, 0, 5)
    Label.BackgroundTransparency = 1
    Label.Text = text .. ': ' .. default
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.Font = Enum.Font.Gotham
    Label.TextSize = 15
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Frame

    local Track = Instance.new('Frame')
    Track.Size = UDim2.new(0.8, 0, 0, 6)
    Track.Position = UDim2.new(0.1, 0, 1, -20)
    Track.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    Track.Parent = Frame
    Instance.new('UICorner', Track).CornerRadius = UDim.new(1, 0)

    local Fill = Instance.new('Frame')
    Fill.Size = UDim2.new((default - min) / (max - min), 0, 1, 0)
    Fill.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Fill.Parent = Track
    Instance.new('UICorner', Fill).CornerRadius = UDim.new(1, 0)

    local Knob = Instance.new('Frame')
    Knob.Size = UDim2.new(0, 14, 0, 14)
    Knob.Position = UDim2.new(Fill.Size.X.Scale, -7, 0.5, -7)
    Knob.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
    Knob.Parent = Track
    Instance.new('UICorner', Knob).CornerRadius = UDim.new(1, 0)

    local dragging = false
    local function setValue(val)
        local rel = math.clamp((val - min) / (max - min), 0, 1)
        TweenService
            :Create(
                Fill,
                TweenInfo.new(0.1),
                { Size = UDim2.new(rel, 0, 1, 0) }
            )
            :Play()
        TweenService:Create(
            Knob,
            TweenInfo.new(0.1),
            { Position = UDim2.new(rel, -7, 0.5, -7) }
        ):Play()
        Label.Text = text .. ': ' .. math.floor(val)
        if callback then
            callback(math.floor(val))
        end
    end
    setValue(default)

    Knob.InputBegan:Connect(function(input)
        if
            input.UserInputType == Enum.UserInputType.MouseButton1
            or input.UserInputType == Enum.UserInputType.Touch
        then
            dragging = true
        end
    end)
    UserInputService.InputEnded:Connect(function(input)
        if
            input.UserInputType == Enum.UserInputType.MouseButton1
            or input.UserInputType == Enum.UserInputType.Touch
        then
            dragging = false
        end
    end)
    UserInputService.InputChanged:Connect(function(input)
        if
            dragging
            and (
                input.UserInputType == Enum.UserInputType.MouseMovement
                or input.UserInputType == Enum.UserInputType.Touch
            )
        then
            local rel = math.clamp(
                (input.Position.X - Track.AbsolutePosition.X)
                    / Track.AbsoluteSize.X,
                0,
                1
            )
            setValue(min + (max - min) * rel)
        end
    end)

    return setValue
end

local ActiveDropdown = nil

local function createMultiDropdown(tabName, text, options, default, callback)
    local tabFrame = TabFrames[tabName]
    if not tabFrame then
        return
    end

    local scroll = tabFrame:FindFirstChildOfClass('ScrollingFrame')
    if not scroll then
        return
    end

    local Frame = Instance.new('Frame')
    Frame.Size = UDim2.new(1, -20, 0, 40)
    Frame.BackgroundColor3 = Color3.fromRGB(35, 35, 35)
    Frame.BorderSizePixel = 0
    Frame.Parent = scroll
    Instance.new('UICorner', Frame).CornerRadius = UDim.new(0, 8)

    local Label = Instance.new('TextLabel')
    Label.Size = UDim2.new(0.6, 0, 1, 0)
    Label.Position = UDim2.new(0, 10, 0, 0)
    Label.BackgroundTransparency = 1
    Label.Text = text
    Label.TextColor3 = Color3.fromRGB(255, 255, 255)
    Label.Font = Enum.Font.Gotham
    Label.TextSize = 15
    Label.TextXAlignment = Enum.TextXAlignment.Left
    Label.Parent = Frame

    local Button = Instance.new('TextButton')
    Button.Size = UDim2.new(0.3, -10, 1, -10)
    Button.Position = UDim2.new(0.65, 0, 0, 5)
    Button.Text = 'Select'
    Button.Font = Enum.Font.GothamBold
    Button.TextSize = 15
    Button.TextColor3 = Color3.fromRGB(220, 220, 220)
    Button.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
    Button.AutoButtonColor = false
    Button.Parent = Frame
    Instance.new('UICorner', Button).CornerRadius = UDim.new(0, 6)

    local Arrow = Instance.new('TextLabel')
    Arrow.Size = UDim2.new(0, 20, 1, 0)
    Arrow.Position = UDim2.new(1, -20, 0, 0)
    Arrow.BackgroundTransparency = 1
    Arrow.Text = 'â–¼'
    Arrow.Font = Enum.Font.GothamBold
    Arrow.TextSize = 14
    Arrow.TextColor3 = Color3.fromRGB(200, 200, 200)
    Arrow.Parent = Button

    local DropFrame = Instance.new('ScrollingFrame')
    DropFrame.Size = UDim2.new(0, 180, 0, 0)
    DropFrame.Position = UDim2.new(1, -180, 1, 5)
    DropFrame.AnchorPoint = Vector2.new(0, 0)
    DropFrame.BackgroundColor3 = Color3.fromRGB(28, 28, 28)
    DropFrame.BorderSizePixel = 0
    DropFrame.ClipsDescendants = true
    DropFrame.Visible = false
    DropFrame.ZIndex = 20
    DropFrame.ScrollBarThickness = 6
    DropFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    DropFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    DropFrame.Parent = Frame
    Instance.new('UICorner', DropFrame).CornerRadius = UDim.new(0, 6)

    local layout = Instance.new('UIListLayout')
    layout.Parent = DropFrame
    layout.Padding = UDim.new(0, 4)
    layout.SortOrder = Enum.SortOrder.LayoutOrder

    layout:GetPropertyChangedSignal('AbsoluteContentSize'):Connect(function()
        DropFrame.CanvasSize =
            UDim2.new(0, 0, 0, layout.AbsoluteContentSize.Y + 10)
    end)

    local selected = {}
    local optionButtons = {}

    local function updateButtonText()
        if #selected == 0 then
            Button.Text = 'Select'
        elseif #selected == 1 then
            Button.Text = selected[1]
        else
            Button.Text = tostring(#selected) .. ' selected'
        end
    end

    for _, opt in ipairs(options) do
        local OptBtn = Instance.new('TextButton')
        OptBtn.Size = UDim2.new(1, -10, 0, 30)
        OptBtn.Position = UDim2.new(0, 0, 0, 0)
        OptBtn.Text = tostring(opt)
        OptBtn.Font = Enum.Font.Gotham
        OptBtn.TextSize = 14
        OptBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        OptBtn.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
        OptBtn.AutoButtonColor = false
        OptBtn.ZIndex = 21
        OptBtn.Parent = DropFrame
        Instance.new('UICorner', OptBtn).CornerRadius = UDim.new(0, 5)
        table.insert(optionButtons, OptBtn)

        OptBtn.MouseEnter:Connect(function()
            if not table.find(selected, opt) then
                TweenService
                    :Create(
                        OptBtn,
                        TweenInfo.new(0.2),
                        { BackgroundColor3 = Color3.fromRGB(60, 60, 60) }
                    )
                    :Play()
            end
        end)
        OptBtn.MouseLeave:Connect(function()
            if not table.find(selected, opt) then
                TweenService
                    :Create(
                        OptBtn,
                        TweenInfo.new(0.2),
                        { BackgroundColor3 = Color3.fromRGB(40, 40, 40) }
                    )
                    :Play()
            end
        end)

        OptBtn.Activated:Connect(function()
            if table.find(selected, opt) then
                for i, v in ipairs(selected) do
                    if v == opt then
                        table.remove(selected, i)
                        break
                    end
                end
                TweenService
                    :Create(
                        OptBtn,
                        TweenInfo.new(0.2),
                        { BackgroundColor3 = Color3.fromRGB(40, 40, 40) }
                    )
                    :Play()
            else
                table.insert(selected, opt)
                TweenService
                    :Create(
                        OptBtn,
                        TweenInfo.new(0.2),
                        { BackgroundColor3 = Color3.fromRGB(0, 170, 255) }
                    )
                    :Play()
            end
            updateButtonText()
            if callback then
                callback(selected)
            end
        end)
    end

    local isOpen = false
    local ActiveDropdown
    Button.Activated:Connect(function()
        if ActiveDropdown and ActiveDropdown ~= DropFrame then
            TweenService:Create(
                ActiveDropdown,
                TweenInfo.new(0.25),
                { Size = UDim2.new(0, 180, 0, 0) }
            ):Play()
            task.delay(0.25, function()
                ActiveDropdown.Visible = false
            end)
            ActiveDropdown = nil
        end

        isOpen = not isOpen
        DropFrame.Visible = true
        ActiveDropdown = isOpen and DropFrame or nil

        local maxVisibleHeight = 150
        local contentHeight = layout.AbsoluteContentSize.Y
        local targetHeight = isOpen
                and math.min(contentHeight, maxVisibleHeight)
            or 0

        TweenService
            :Create(
                DropFrame,
                TweenInfo.new(
                    0.25,
                    Enum.EasingStyle.Quad,
                    Enum.EasingDirection.Out
                ),
                { Size = UDim2.new(0, 180, 0, targetHeight) }
            )
            :Play()
        TweenService
            :Create(
                Arrow,
                TweenInfo.new(0.25),
                { Rotation = isOpen and 180 or 0 }
            )
            :Play()

        if not isOpen then
            task.delay(0.25, function()
                if not isOpen then
                    DropFrame.Visible = false
                end
            end)
        end
    end)

    -- Enable touch scrolling on mobile
    DropFrame.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.Touch then
            DropFrame:CaptureInput(input)
        end
    end)

    if default then
        for _, d in ipairs(default) do
            table.insert(selected, d)
            for _, btn in ipairs(optionButtons) do
                if btn.Text == d then
                    btn.BackgroundColor3 = Color3.fromRGB(0, 170, 255)
                end
            end
        end
        updateButtonText()
    end

    return selected
end

local Sections = {}

local function createSection(tabName, text)
    local tabFrame = TabFrames[tabName]
    if not tabFrame then
        return
    end
    local scroll = tabFrame:FindFirstChildOfClass('ScrollingFrame')
    if not scroll then
        return
    end

    local section = Instance.new('TextLabel')
    section.Size = UDim2.new(1, -10, 0, 25)
    section.BackgroundTransparency = 1
    section.Font = Enum.Font.GothamBold
    section.TextSize = 16
    section.TextXAlignment = Enum.TextXAlignment.Left
    section.Text = '  ' .. text
    section.TextColor3 = Color3.fromRGB(200, 200, 200)
    section.Parent = scroll

    Sections[tabName] = Sections[tabName] or {}
    table.insert(Sections[tabName], section)

    return section
end

local minimized = false
MinBtn.MouseButton1Click:Connect(function()
    minimized = not minimized

    TweenService
        :Create(
            MainFrame,
            TweenInfo.new(0.35, Enum.EasingStyle.Quad, Enum.EasingDirection.Out),
            {
                Size = minimized and UDim2.new(0, 650, 0, 50)
                    or UDim2.new(0, 650, 0, 430),
            }
        )
        :Play()

    TweenService:Create(Sidebar, TweenInfo.new(0.25), {
        BackgroundTransparency = minimized and 1 or 0,
    }):Play()

    for _, btn in pairs(TabButtons) do
        btn.Active = not minimized
        btn.Selectable = not minimized

        TweenService:Create(btn, TweenInfo.new(0.25), {
            BackgroundTransparency = minimized and 1 or 0,
        }):Play()

        for _, child in pairs(btn:GetDescendants()) do
            if child:IsA('TextLabel') then
                TweenService
                    :Create(child, TweenInfo.new(0.25), {
                        TextTransparency = minimized and 1 or 0,
                    })
                    :Play()
            elseif child:IsA('ImageLabel') then
                TweenService
                    :Create(child, TweenInfo.new(0.25), {
                        ImageTransparency = minimized and 1 or 0,
                    })
                    :Play()
            end
        end
    end

    for tabName, frame in pairs(TabFrames) do
        frame.Visible = not minimized and (tabName == CurrentTab)
    end
end)
