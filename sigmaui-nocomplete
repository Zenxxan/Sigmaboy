-- UI Library
local UILibrary = {}
UILibrary.__index = UILibrary

-- Tween service for smooth animations
local TweenService = game:GetService("TweenService")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")

-- Color scheme
local Colors = {
    Primary = Color3.fromRGB(0, 120, 215),
    Secondary = Color3.fromRGB(40, 40, 40),
    Background = Color3.fromRGB(30, 30, 30),
    Text = Color3.fromRGB(255, 255, 255),
    Accent = Color3.fromRGB(0, 200, 83),
    Error = Color3.fromRGB(255, 59, 48)
}

-- Utility functions
local function CreateCornerRadius(Parent, Radius)
    local Corner = Instance.new("UICorner")
    Corner.CornerRadius = UDim.new(0, Radius)
    Corner.Parent = Parent
    return Corner
end

local function CreateStroke(Parent, Color, Thickness)
    local Stroke = Instance.new("UIStroke")
    Stroke.Color = Color
    Stroke.Thickness = Thickness
    Stroke.Parent = Parent
    return Stroke
end

local function Tween(Object, Properties, Duration, Style, Direction)
    local TweenInfo = TweenInfo.new(Duration or 0.2, Style or Enum.EasingStyle.Quad, Direction or Enum.EasingDirection.Out)
    local Tween = TweenService:Create(Object, TweenInfo, Properties)
    Tween:Play()
    return Tween
end

-- Check if device is mobile
function UILibrary:IsMobile()
    return UserInputService.TouchEnabled and not UserInputService.MouseEnabled
end

-- Create main window
function UILibrary:CreateWindow(Title)
    local Window = {}
    
    -- Main screen GUI
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "UILibrary"
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    ScreenGui.Parent = game:GetService("CoreGui") or game.Players.LocalPlayer:WaitForChild("PlayerGui")
    
    -- Main container
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 400, 0, 500)
    MainFrame.Position = UDim2.new(0.5, -200, 0.5, -250)
    MainFrame.BackgroundColor3 = Colors.Background
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    -- Make window draggable
    local DragButton = Instance.new("TextButton")
    DragButton.Name = "DragButton"
    DragButton.Size = UDim2.new(1, 0, 0, 30)
    DragButton.Position = UDim2.new(0, 0, 0, 0)
    DragButton.BackgroundColor3 = Colors.Primary
    DragButton.Text = Title or "UI Library"
    DragButton.TextColor3 = Colors.Text
    DragButton.TextSize = 14
    DragButton.BorderSizePixel = 0
    DragButton.Parent = MainFrame
    
    CreateCornerRadius(MainFrame, 8)
    CreateCornerRadius(DragButton, 8)
    CreateStroke(MainFrame, Colors.Primary, 2)
    
    -- Content area
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Name = "ContentFrame"
    ContentFrame.Size = UDim2.new(1, -20, 1, -50)
    ContentFrame.Position = UDim2.new(0, 10, 0, 40)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame
    
    local UIListLayout = Instance.new("UIListLayout")
    UIListLayout.Padding = UDim.new(0, 10)
    UIListLayout.Parent = ContentFrame
    
    -- Dragging functionality
    local Dragging, DragInput, DragStart, StartPosition
    
    local function Update(input)
        local Delta = input.Position - DragStart
        MainFrame.Position = UDim2.new(
            StartPosition.X.Scale, 
            StartPosition.X.Offset + Delta.X, 
            StartPosition.Y.Scale, 
            StartPosition.Y.Offset + Delta.Y
        )
    end
    
    DragButton.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            Dragging = true
            DragStart = input.Position
            StartPosition = MainFrame.Position
            
            input.Changed:Connect(function()
                if input.UserInputState == Enum.UserInputState.End then
                    Dragging = false
                end
            end)
        end
    end)
    
    DragButton.InputChanged:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch then
            DragInput = input
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if input == DragInput and Dragging then
            Update(input)
        end
    end)
    
    -- Mobile support: add close button for mobile
    if UILibrary:IsMobile() then
        local CloseButton = Instance.new("TextButton")
        CloseButton.Name = "CloseButton"
        CloseButton.Size = UDim2.new(0, 60, 0, 25)
        CloseButton.Position = UDim2.new(1, -70, 0, 5)
        CloseButton.BackgroundColor3 = Colors.Error
        CloseButton.Text = "Close"
        CloseButton.TextColor3 = Colors.Text
        CloseButton.TextSize = 12
        CloseButton.Parent = MainFrame
        CreateCornerRadius(CloseButton, 4)
        
        CloseButton.MouseButton1Click:Connect(function()
            ScreenGui:Destroy()
        end)
    end
    
    function Window:CreateTab(Name)
        local Tab = {}
        local TabButtons = {}
        local TabContents = {}
        
        -- Tab buttons container
        local TabButtonContainer = Instance.new("Frame")
        TabButtonContainer.Name = "TabButtonContainer"
        TabButtonContainer.Size = UDim2.new(1, 0, 0, 30)
        TabButtonContainer.BackgroundTransparency = 1
        TabButtonContainer.Parent = ContentFrame
        
        local TabListLayout = Instance.new("UIListLayout")
        TabListLayout.FillDirection = Enum.FillDirection.Horizontal
        TabListLayout.Padding = UDim.new(0, 5)
        TabListLayout.Parent = TabButtonContainer
        
        -- Tab content container
        local TabContentContainer = Instance.new("Frame")
        TabContentContainer.Name = "TabContentContainer"
        TabContentContainer.Size = UDim2.new(1, 0, 1, -40)
        TabContentContainer.Position = UDim2.new(0, 0, 0, 40)
        TabContentContainer.BackgroundTransparency = 1
        TabContentContainer.Parent = ContentFrame
        
        local TabContentLayout = Instance.new("UIListLayout")
        TabContentLayout.Padding = UDim.new(0, 10)
        TabContentLayout.Parent = TabContentContainer
        
        function Tab:AddButton(ButtonName, Callback)
            local ButtonFrame = Instance.new("Frame")
            ButtonFrame.Name = "ButtonFrame"
            ButtonFrame.Size = UDim2.new(1, 0, 0, 40)
            ButtonFrame.BackgroundColor3 = Colors.Secondary
            ButtonFrame.Parent = TabContentContainer
            CreateCornerRadius(ButtonFrame, 6)
            
            local Button = Instance.new("TextButton")
            Button.Name = "Button"
            Button.Size = UDim2.new(1, -10, 1, -10)
            Button.Position = UDim2.new(0, 5, 0, 5)
            Button.BackgroundColor3 = Colors.Primary
            Button.Text = ButtonName
            Button.TextColor3 = Colors.Text
            Button.TextSize = 14
            Button.BorderSizePixel = 0
            Button.Parent = ButtonFrame
            CreateCornerRadius(Button, 4)
            
            -- Hover effects
            local OriginalColor = Button.BackgroundColor3
            
            Button.MouseEnter:Connect(function()
                Tween(Button, {BackgroundColor3 = OriginalColor:Lerp(Color3.new(1, 1, 1), 0.2)}, 0.2)
            end)
            
            Button.MouseLeave:Connect(function()
                Tween(Button, {BackgroundColor3 = OriginalColor}, 0.2)
            end)
            
            Button.MouseButton1Click:Connect(function()
                if Callback then
                    Callback()
                end
            end)
            
            return Button
        end
        
        function Tab:AddToggle(ToggleName, DefaultState, Callback)
            local ToggleFrame = Instance.new("Frame")
            ToggleFrame.Name = "ToggleFrame"
            ToggleFrame.Size = UDim2.new(1, 0, 0, 30)
            ToggleFrame.BackgroundTransparency = 1
            ToggleFrame.Parent = TabContentContainer
            
            local ToggleLabel = Instance.new("TextLabel")
            ToggleLabel.Name = "ToggleLabel"
            ToggleLabel.Size = UDim2.new(0.7, 0, 1, 0)
            ToggleLabel.Position = UDim2.new(0, 0, 0, 0)
            ToggleLabel.BackgroundTransparency = 1
            ToggleLabel.Text = ToggleName
            ToggleLabel.TextColor3 = Colors.Text
            ToggleLabel.TextSize = 14
            ToggleLabel.TextXAlignment = Enum.TextXAlignment.Left
            ToggleLabel.Parent = ToggleFrame
            
            local ToggleButton = Instance.new("TextButton")
            ToggleButton.Name = "ToggleButton"
            ToggleButton.Size = UDim2.new(0, 50, 0, 25)
            ToggleButton.Position = UDim2.new(1, -50, 0.5, -12.5)
            ToggleButton.BackgroundColor3 = DefaultState and Colors.Accent or Colors.Secondary
            ToggleButton.Text = ""
            ToggleButton.BorderSizePixel = 0
            ToggleButton.Parent = ToggleFrame
            CreateCornerRadius(ToggleButton, 12)
            
            local ToggleKnob = Instance.new("Frame")
            ToggleKnob.Name = "ToggleKnob"
            ToggleKnob.Size = UDim2.new(0, 21, 0, 21)
            ToggleKnob.Position = UDim2.new(0, DefaultState and 29 or 2, 0.5, -10.5)
            ToggleKnob.BackgroundColor3 = Colors.Text
            ToggleKnob.BorderSizePixel = 0
            ToggleKnob.Parent = ToggleButton
            CreateCornerRadius(ToggleKnob, 21)
            
            local State = DefaultState or false
            
            local function UpdateToggle()
                if State then
                    Tween(ToggleButton, {BackgroundColor3 = Colors.Accent}, 0.2)
                    Tween(ToggleKnob, {Position = UDim2.new(0, 29, 0.5, -10.5)}, 0.2)
                else
                    Tween(ToggleButton, {BackgroundColor3 = Colors.Secondary}, 0.2)
                    Tween(ToggleKnob, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.2)
                end
                
                if Callback then
                    Callback(State)
                end
            end
            
            ToggleButton.MouseButton1Click:Connect(function()
                State = not State
                UpdateToggle()
            end)
            
            -- Return toggle control functions
            return {
                SetState = function(NewState)
                    State = NewState
                    UpdateToggle()
                end,
                GetState = function()
                    return State
                end
            }
        end
        
        function Tab:AddSlider(SliderName, MinValue, MaxValue, DefaultValue, Callback)
            local SliderFrame = Instance.new("Frame")
            SliderFrame.Name = "SliderFrame"
            SliderFrame.Size = UDim2.new(1, 0, 0, 50)
            SliderFrame.BackgroundTransparency = 1
            SliderFrame.Parent = TabContentContainer
            
            local SliderLabel = Instance.new("TextLabel")
            SliderLabel.Name = "SliderLabel"
            SliderLabel.Size = UDim2.new(1, 0, 0, 20)
            SliderLabel.Position = UDim2.new(0, 0, 0, 0)
            SliderLabel.BackgroundTransparency = 1
            SliderLabel.Text = SliderName .. ": " .. DefaultValue
            SliderLabel.TextColor3 = Colors.Text
            SliderLabel.TextSize = 14
            SliderLabel.TextXAlignment = Enum.TextXAlignment.Left
            SliderLabel.Parent = SliderFrame
            
            local SliderTrack = Instance.new("Frame")
            SliderTrack.Name = "SliderTrack"
            SliderTrack.Size = UDim2.new(1, 0, 0, 6)
            SliderTrack.Position = UDim2.new(0, 0, 0, 25)
            SliderTrack.BackgroundColor3 = Colors.Secondary
            SliderTrack.BorderSizePixel = 0
            SliderTrack.Parent = SliderFrame
            CreateCornerRadius(SliderTrack, 3)
            
            local SliderFill = Instance.new("Frame")
            SliderFill.Name = "SliderFill"
            SliderFill.Size = UDim2.new((DefaultValue - MinValue) / (MaxValue - MinValue), 0, 1, 0)
            SliderFill.BackgroundColor3 = Colors.Primary
            SliderFill.BorderSizePixel = 0
            SliderFill.Parent = SliderTrack
            CreateCornerRadius(SliderFill, 3)
            
            local SliderButton = Instance.new("TextButton")
            SliderButton.Name = "SliderButton"
            SliderButton.Size = UDim2.new(0, 20, 0, 20)
            SliderButton.Position = UDim2.new((DefaultValue - MinValue) / (MaxValue - MinValue), -10, 0.5, -10)
            SliderButton.BackgroundColor3 = Colors.Text
            SliderButton.Text = ""
            SliderButton.BorderSizePixel = 0
            SliderButton.Parent = SliderTrack
            CreateCornerRadius(SliderButton, 10)
            CreateStroke(SliderButton, Colors.Primary, 2)
            
            local Dragging = false
            local Value = DefaultValue or MinValue
            
            local function UpdateSlider(Input)
                local RelativeX = (Input.Position.X - SliderTrack.AbsolutePosition.X) / SliderTrack.AbsoluteSize.X
                RelativeX = math.clamp(RelativeX, 0, 1)
                
                Value = math.floor(MinValue + (MaxValue - MinValue) * RelativeX)
                SliderLabel.Text = SliderName .. ": " .. Value
                
                SliderFill.Size = UDim2.new(RelativeX, 0, 1, 0)
                SliderButton.Position = UDim2.new(RelativeX, -10, 0.5, -10)
                
                if Callback then
                    Callback(Value)
                end
            end
            
            SliderButton.InputBegan:Connect(function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = true
                end
            end)
            
            SliderButton.InputEnded:Connect(function(Input)
                if Input.UserInputType == Enum.UserInputType.MouseButton1 or Input.UserInputType == Enum.UserInputType.Touch then
                    Dragging = false
                end
            end)
            
            UserInputService.InputChanged:Connect(function(Input)
                if Dragging and (Input.UserInputType == Enum.UserInputType.MouseMovement or Input.UserInputType == Enum.UserInputType.Touch) then
                    UpdateSlider(Input)
                end
            end)
            
            -- Mobile support: allow tapping on track
            if UILibrary:IsMobile() then
                SliderTrack.InputBegan:Connect(function(Input)
                    if Input.UserInputType == Enum.UserInputType.Touch then
                        UpdateSlider(Input)
                    end
                end)
            end
            
            return {
                SetValue = function(NewValue)
                    Value = math.clamp(NewValue, MinValue, MaxValue)
                    local RelativeX = (Value - MinValue) / (MaxValue - MinValue)
                    
                    SliderLabel.Text = SliderName .. ": " .. Value
                    SliderFill.Size = UDim2.new(RelativeX, 0, 1, 0)
                    SliderButton.Position = UDim2.new(RelativeX, -10, 0.5, -10)
                    
                    if Callback then
                        Callback(Value)
                    end
                end,
                GetValue = function()
                    return Value
                end
            }
        end
        
        function Tab:AddLabel(LabelText)
            local LabelFrame = Instance.new("Frame")
            LabelFrame.Name = "LabelFrame"
            LabelFrame.Size = UDim2.new(1, 0, 0, 20)
            LabelFrame.BackgroundTransparency = 1
            LabelFrame.Parent = TabContentContainer
            
            local Label = Instance.new("TextLabel")
            Label.Name = "Label"
            Label.Size = UDim2.new(1, 0, 1, 0)
            Label.BackgroundTransparency = 1
            Label.Text = LabelText
            Label.TextColor3 = Colors.Text
            Label.TextSize = 14
            Label.TextXAlignment = Enum.TextXAlignment.Left
            Label.Parent = LabelFrame
            
            return Label
        end
        
        return Tab
    end
    
    function Window:Destroy()
        ScreenGui:Destroy()
    end
    
    return Window
end

return UILibrary
